<!DOCTYPE html>
<html>

<head>
    <title>

        Card Designer

    </title>


    <style type='text/css'>
	
	
	body{
	
	
	text-align:center;
	}
	
        #overlay {

            position: fixed;
            width: 100%;
            height: 100%;
            left: 0;
            left: 0;
            background-color: rgba(0, 0, 0, 0.4);
            z-index: 1;

            overflow: auto;
            display: none;
            text-align: center;
        }


        #canvascontain {

            margin: 0 auto;
            position: relative;
            top: 100px;
            left: 40%;
            text-align: center;

        }

		canvas{
		
		border:1px solid red;
		}
		
		
		
		
		
		
		

        #topbar {


            padding: 20px;

            position: relative;
            top: 20px;
            margin: 0 auto;

            text-align: center;

            background-color: aliceblue;

        }
		
		#topbar > a {
		
	 
		text-decoration:none;
		  background: rgb(37, 196, 37);
            color: white;
            padding: 7px;
            border-radius: 1px;
            font-weight: bold;
            white-space: nowrap;
			
			margin-left: 5px;
			margin-right:5px;
		
		}
		
		
		

        .theforms {

            display: none;
            position: relative;
            top: 15%;
            width: 30%;

            background: #fff;
            padding: 50px;
            margin: 0 auto;

        }

        button {

            background: rgb(37, 196, 37);
            color: white;
            padding: 7px;
            border-radius: 1px;
            font-weight: bold;
            white-space: nowrap;
        }
		
		
		
		#filename{
		
		margin:0 auto;
		position:relative;
		width:200px;
		color:#333;
	 
		 
		}
		
		
		.cleartop{
		
		clear:both;
		position:relative;
		top:50px;
		
		}
		


        #textControls{

position: relative;
top:10px;


        }



        .controltxt{

max-width:100px;


        }
		
		</style>





</head>


<body style='overflow:hidden'>




    <div id='overlay'>






        <form class='theforms' enctype="multipart/form-data">

            <h4>Add Text</h4>

            <textarea id='otxt' rows='12' cols='35'> Type here.. </textarea>
            <br/>
            <br/>
            <button id='addtxt'>Save Text</button>

        </form>





        <form class='theforms'>

            <h4>Add an Image</h4>
             
                
                <input type="file" id="file" />
           
           

        </form>







        <form class='theforms'>
            <h4>Change Background</h4>

            <input type="file" id="file2" />
            
			

        </form>





        <form class='theforms'>
            <h4>Saving your work..</h4>
<br/>
         <img src='spinner.gif' width='200' />
         <br/>

<span id='message'>...</span>


        </form>





    </div>









    <div id='topbar'>


        <a href='#' id='del'>Remove </a>
     

    <a href='#' id='txt'>Add Text </a>
     


    <a href='#' id='img'>Add Image </a>
     
    <a href='#' id='bg'>Change Background </a>



    <a onclick="sendSelectedObjectToFront()" title="Bring selected to front">
        <span class=""> To Front</span>
    </a>
    <a onclick="sendSelectedObjectBack()" title="Send selected to back">
        <span class="">To Back</span>
    </a>



    <a onclick="refresh()" title="Start fresh">
        <span class=""> Clear All</span>
    </a>

	
	  <a href='#' id='savetemp'>Save Template</a>
	  
	  
	
    </div>


 <br/>


    <div id="textControls" style='' hidden>
        <div id="text-wrapper" data-ng-show="getText()">
            <div id="text-controls">
                <select id="font-family">
                    <option value="arial">Arial</option>
                    <option value="HelveticaNeue" selected>Helvetica Neue</option>
                    <option value="myriad pro">Myriad Pro</option>
                    <option value="delicious">Delicious</option>
                    <option value="verdana">Verdana</option>
                    <option value="Georgia">Georgia</option>
                    <option value="courier">Courier</option>
                    <option value="comic sans ms">Comic Sans MS</option>
                    <option value="impact">Impact</option>
                    <option value="monaco">Monaco</option>
                    <option value="optima">Optima</option>
                    <option value="hoefler text">Hoefler Text</option>
                    <option value="Open Sans">Open Sans</option>
                    <option value="Times New Roman">Times New Roman</option>
                </select>
                <input type="color" id="text-color" size="10">
              
                <label for="text-stroke-color"  >Stroke C:</label>
                <input type="color" id="text-stroke-color" class='controltxt'>
                <label for="text-stroke-width">Stroke W:</label>
                <input type="number" value="1" min="1" max="5" id="text-stroke-width" class='controltxt'>
                <label for="text-font-size">Font S:</label>
                <input type="number" min="12" max="120" step="1" id="text-font-size" class='controltxt'>
                <label for="text-line-height">Line H:</label>
                <input type="number" min="0" max="10" step="0.1" id="text-line-height" class='controltxt'>
                <label for="text-bg-color">BG Color:</label>
                <input type="color" id="text-bg-color" size="10" class='controltxt'>
                <label for="text-lines-bg-color">BG Text Color:</label>
                <input type="color" id="text-lines-bg-color" size="10" class='controltxt'>
                <input type='checkbox' name='fonttype' id="text-cmd-bold" class='controltxt'>
                <b>B</b>
                <input type='checkbox' name='fonttype' id="text-cmd-italic" class='controltxt'>
                <em>I</em>
                <input type='checkbox' name='fonttype' id="text-cmd-underline" class='controltxt'> Underline
                <input type='checkbox' name='fonttype' id="text-cmd-linethrough" class='controltxt'> Linethrough
                <input type='checkbox' name='fonttype' id="text-cmd-overline" class='controltxt'> Overline
            </div>
        </div>
    </div>




<div class='cleartop'>
<input type='text' id='filename'  placeholder='filename'/>
</div>






    <div id='canvascontain'>
	

 
        <canvas id="canvas" width="400" height="500"></canvas>	
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/2.2.3/fabric.min.js"></script>
    <script>


//initialize canvas
    var canvas = new fabric.Canvas('canvas', {


backgroundColor: '#f3f3f3',
selectionColor: '#fefefe',
selectionLineWidth: 2

})

 
















        //show theforms

        document.getElementById('txt').onclick = function () {

            document.getElementById('overlay').style.display = 'block';
            document.getElementsByClassName('theforms')[0].style.display = 'block'
        }

        document.getElementById('img').onclick = function () {

            document.getElementById('overlay').style.display = 'block';
            document.getElementsByClassName('theforms')[1].style.display = 'block'
        }


        document.getElementById('bg').onclick = function () {

            document.getElementById('overlay').style.display = 'block';
            document.getElementsByClassName('theforms')[2].style.display = 'block'
        }

//save the template
   document.getElementById('savetemp').onclick = function () {

            document.getElementById('overlay').style.display = 'block';
            document.getElementsByClassName('theforms')[3].style.display = 'block'
			
			var filed=canvas.toSVG();
			
			if (filed != '')
			
			{ 
			
var fname=document.getElementById('filename').value;



var http = new XMLHttpRequest();
var url = "http://dev.opengift.com.ng/api/savetemplate.php";
var params = "filename="+fname+'&file='+filed;
http.open("POST", url, true);

//Send the proper header information along with the request
http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

http.onreadystatechange = function() {//Call a function when the state changes.
    if(http.readyState == 4 && http.status == 200) {
     








//show them the done! message, and make sure they see it for two seconds

			setTimeout( function(){
			

			
			
		 
            document.getElementById('overlay').style.display = 'none';
       document.getElementsByClassName('theforms')[3].style.display = 'none';
       
       document.getElementById('message').innerHTML='Saved!';
       }, 2000)
       
       
       document.getElementById('message').innerHTML='...';





    }
}
http.send(params);





			}
        }

























    














//text controls
canvas.on('object:selected', function(e) {
   if (e.target.type === 'i-text') {
      document.getElementById('textControls').hidden = false;
   }
});
canvas.on('before:selection:cleared', function(e) {
   if (e.target.type === 'i-text') {
      document.getElementById('textControls').hidden = true;
   }
});



document.getElementById('file').addEventListener("change", function(e) {
   var file = e.target.files[0];
   var reader = new FileReader();
   reader.onload = function(f) {
      var data = f.target.result;
      fabric.Image.fromURL(data, function(img) {
         var oImg = img.set({
            left: 0,
            top: 0,
            angle: 0,
            border: '#000',
            stroke: '#F0F0F0', //<-- set this
            strokeWidth: 40 //<-- set this
         }).scale(0.2);
         canvas.add(oImg).renderAll();
         //var a = canvas.setActiveObject(oImg);
         var dataURL = canvas.toDataURL({
            format: 'png',
            quality: 1
         });
      });
   };
   reader.readAsDataURL(file);



   document.getElementById('overlay').style.display = 'none';
            document.getElementsByClassName('theforms')[1].style.display = 'none'




});


document.getElementById('file2').addEventListener("change", function(e) {
   var file = e.target.files[0];
   var reader = new FileReader();
   reader.onload = function(f) {
      var data = f.target.result;
      fabric.Image.fromURL(data, function(img) {
         // add background image
         canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas), {
            scaleX: canvas.width / img.width,
            scaleY: canvas.height / img.height
         });
      });
   };
   reader.readAsDataURL(file);



 document.getElementById('overlay').style.display = 'none';
            document.getElementsByClassName('theforms')[2].style.display = 'none'


});





 
 
// Edit Text
 
document.getElementById('text-color').onchange = function() {
   canvas.getActiveObject().set('fill',this.value);
   canvas.renderAll();
};
document.getElementById('text-bg-color').onchange = function() {
   canvas.getActiveObject().set('backgroundColor',this.value);
   canvas.renderAll();
};
document.getElementById('text-lines-bg-color').onchange = function() {
   canvas.getActiveObject().set('textBackgroundColor',this.value);
   canvas.renderAll();
};
document.getElementById('text-stroke-color').onchange = function() {
   canvas.getActiveObject().set('stroke',this.value);
   canvas.renderAll();
};
document.getElementById('text-stroke-width').onchange = function() {
   canvas.getActiveObject().set('strokeWidth',this.value);
   canvas.renderAll();
};
document.getElementById('font-family').onchange = function() {
   canvas.getActiveObject().set('fontFamily',this.value);
   canvas.renderAll();
};
document.getElementById('text-font-size').onchange = function() {
   canvas.getActiveObject().set('fontSize',this.value);
   canvas.renderAll();
};
document.getElementById('text-line-height').onchange = function() {
   canvas.getActiveObject().set('lineHeight',this.value);
   canvas.renderAll();
};
 


 
 




// Send selected object to front or back
var selectedObject;
canvas.on('object:selected', function(event) {
   selectedObject = event.target;
});


  function sendSelectedObjectBack () {
   canvas.sendToBack(selectedObject);
}
  function sendSelectedObjectToFront () {
      canvas.bringToFront(selectedObject);
   }


 
// Do some initializing stuff
fabric.Object.prototype.set({
   transparentCorners: true,
   cornerColor: '#22A7F0',
   borderColor: '#22A7F0',
   cornerSize: 12,
   padding: 5
});




















        //add txt

        document.getElementById('addtxt').onclick = function () {

            var filled = document.getElementById('otxt').value;
            var text = new fabric.IText(filled, { left: 100, top: 100,fontFamily: 'helvetica neue'});


 



            canvas.add(text);

            document.getElementById('overlay').style.display = 'none';
            document.getElementsByClassName('theforms')[0].style.display = 'none'


            return false;


        }








      



        //remove object
        document.getElementById('del').onclick = function () {


            canvas.remove(canvas.getActiveObject());



        }




 






    </script>
</body>

</html>